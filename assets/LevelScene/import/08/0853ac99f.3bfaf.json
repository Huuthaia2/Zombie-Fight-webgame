[1,["f09t5IZL1Csa+TbhTbJXyb@6c48a","9euvsinK9Niok4ySd7wfIh"],["mainTexture","_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_states","_defines","_props"],1,12]],[[0,0,1,2,4],[1,0,1,2,3]],[[[[0,"hpBarMng",[{"hash":810273009,"name":"hpBarMng|vs|fs:frag","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_color;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec4 v_color;\nlayout(set = 1, binding = 0) uniform myData {\n  vec4 barPositions[100];\n  vec4 barSize[100];\n  vec4 playerScope;\n};\nvoid main () {\n  v_uv = a_texCoord;\n  int index = int(a_position.z);\n  vec4 p = barPositions[index];\n  v_color = a_color;\n  v_color.w = 1.0 - (1.0 - p.w) * a_color.w;\n  float x = p.x - playerScope.x;\n  float z = p.z - playerScope.z;\n  float s = step(0.0, playerScope.w - x * x - z * z);\n  vec4 size = barSize[index];\n  vec4 pos = vec4(p.xyz, 1.0);\n  pos = cc_matView * pos;\n  pos.xy += a_position.xy * size.xy * sign(p.y);\n  pos.xyz *= s;\n  gl_Position = cc_matProj * pos;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec4 v_color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n};\nvec4 frag () {\n  vec4 col = texture(mainTexture, v_uv);\n  col.xyz = v_color.xyz;\n  col.a *= step(0.0, v_color.w - v_uv.x);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_texCoord;\nout vec2 v_uv;\nout vec4 v_color;\nlayout(std140) uniform myData {\n  vec4 barPositions[100];\n  vec4 barSize[100];\n  vec4 playerScope;\n};\nvoid main () {\n  v_uv = a_texCoord;\n  int index = int(a_position.z);\n  vec4 p = barPositions[index];\n  v_color = a_color;\n  v_color.w = 1.0 - (1.0 - p.w) * a_color.w;\n  float x = p.x - playerScope.x;\n  float z = p.z - playerScope.z;\n  float s = step(0.0, playerScope.w - x * x - z * z);\n  vec4 size = barSize[index];\n  vec4 pos = vec4(p.xyz, 1.0);\n  pos = cc_matView * pos;\n  pos.xy += a_position.xy * size.xy * sign(p.y);\n  pos.xyz *= s;\n  gl_Position = cc_matProj * pos;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 v_uv;\nin vec4 v_color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n};\nvec4 frag () {\n  vec4 col = texture(mainTexture, v_uv);\n  col.xyz = v_color.xyz;\n  col.a *= step(0.0, v_color.w - v_uv.x);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvarying vec4 v_color;\n   uniform vec4 barPositions[100];\n   uniform vec4 barSize[100];\n   uniform vec4 playerScope;\nvoid main () {\n  v_uv = a_texCoord;\n  int index = int(a_position.z);\n  vec4 p = barPositions[index];\n  v_color = a_color;\n  v_color.w = 1.0 - (1.0 - p.w) * a_color.w;\n  float x = p.x - playerScope.x;\n  float z = p.z - playerScope.z;\n  float s = step(0.0, playerScope.w - x * x - z * z);\n  vec4 size = barSize[index];\n  vec4 pos = vec4(p.xyz, 1.0);\n  pos = cc_matView * pos;\n  pos.xy += a_position.xy * size.xy * sign(p.y);\n  pos.xyz *= s;\n  gl_Position = cc_matProj * pos;\n}","frag":"\nprecision highp float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 v_uv;\nvarying vec4 v_color;\nuniform sampler2D mainTexture;\nvec4 frag () {\n  vec4 col = texture2D(mainTexture, v_uv);\n  col.xyz = v_color.xyz;\n  col.a *= step(0.0, v_color.w - v_uv.x);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":238,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"myData","stageFlags":1,"binding":0,"members":[{"name":"barPositions","type":16,"count":100},{"name":"barSize","type":16,"count":100},{"name":"playerScope","type":16,"count":1}],"defines":[]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"name":"transparent","passes":[{"program":"hpBarMng|vs|fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}}}}]}]]],0,0,[],[],[]],[[[1,[{"priority":129,"rasterizerState":{},"depthStencilState":{"depthWrite":false},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[0,1],[0,1]]]]
