[1,["21+ZyPdmNOlq4FkXxJWp/g@6c48a","dduoD3u4pPJ4jgWMdyTeQz"],["mainTexture","_effectAsset"],[["cc.Material",["_techIdx","_states","_defines","_props"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,3,4],[1,0,1,2,4]],[[[[0,"1",[{"priority":129,"rasterizerState":{},"depthStencilState":{"depthWrite":false},"blendState":{"targets":[{}]}}],[{}],[[[{},"frameData",8,[2,4,3,60,12],"playData",8,[2,1,0,0,0],"mainTexture",6,0]],11]]],0,0,[0,0],[0,1],[0,1]],[[[1,"frameAnim",[{"hash":331107098,"name":"frameAnim|vs:vert|fs:frag","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 0) in vec4 a_matWorld0;\n  layout(location = 1) in vec4 a_matWorld1;\n  layout(location = 2) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 3) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 4) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 5) in vec3 a_position;\nlayout(location = 6) in vec2 a_texCoord;\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform frameAnimData {\n  vec4 frameData;\n  vec4 playData;\n  vec4 animData;\n};\nvec4 vert () {\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 position = vec4(0.0, 0.0, 0.0, 1.0);\n  vec4 wpos = matWorld * position;\n  float frame = playData.z;\n  if(frame == 0.0) {\n    float time = cc_time.x - playData.w + (wpos.x + wpos.y + wpos.z) * playData.y * 0.3;\n    frame = floor(time * frameData.z);\n    if (playData.x > 0.0) {\n      float count = frame / frameData.w;\n      if (count >= playData.x) {\n        v_uv = a_texCoord;\n        return position;\n      }\n    }\n    frame = mod(frame, frameData.w);\n  } else {\n    frame -= 1.0;\n  }\n  frame += animData.x;\n  float uvx = (mod(frame, frameData.x) + a_texCoord.x) / frameData.x;\n  float uvy = (floor(frame / frameData.x) + a_texCoord.y) / frameData.y;\n  v_uv = vec2(uvx, uvy);\n  position = cc_matView * wpos;\n  position.xyz += a_position * matWorld[0][0];\n  return cc_matProj * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScale;\n};\n#if USE_COLOR_SCALE\n#endif\nvec4 frag () {\n  vec4 col = mainColor * texture(mainTexture, v_uv);\n  #if USE_COLOR_SCALE\n    float a = col.x + col.y + col.z;\n    a *= 0.333;\n    col *= 1.2;\n    col.a = a;\n  #endif\n  if (col.a < 0.01) {\n    discard;\n  }\n  col *= colorScale;\n  return col;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nlayout(std140) uniform frameAnimData {\n  vec4 frameData;\n  vec4 playData;\n  vec4 animData;\n};\nvec4 vert () {\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 position = vec4(0.0, 0.0, 0.0, 1.0);\n  vec4 wpos = matWorld * position;\n  float frame = playData.z;\n  if(frame == 0.0) {\n    float time = cc_time.x - playData.w + (wpos.x + wpos.y + wpos.z) * playData.y * 0.3;\n    frame = floor(time * frameData.z);\n    if (playData.x > 0.0) {\n      float count = frame / frameData.w;\n      if (count >= playData.x) {\n        v_uv = a_texCoord;\n        return position;\n      }\n    }\n    frame = mod(frame, frameData.w);\n  } else {\n    frame -= 1.0;\n  }\n  frame += animData.x;\n  float uvx = (mod(frame, frameData.x) + a_texCoord.x) / frameData.x;\n  float uvy = (floor(frame / frameData.x) + a_texCoord.y) / frameData.y;\n  v_uv = vec2(uvx, uvy);\n  position = cc_matView * wpos;\n  position.xyz += a_position * matWorld[0][0];\n  return cc_matProj * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nin vec2 v_uv;\nuniform sampler2D mainTexture;\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScale;\n};\n#if USE_COLOR_SCALE\n#endif\nvec4 frag () {\n  vec4 col = mainColor * texture(mainTexture, v_uv);\n  #if USE_COLOR_SCALE\n    float a = col.x + col.y + col.z;\n    a *= 0.333;\n    col *= 1.2;\n    col.a = a;\n  #endif\n  if (col.a < 0.01) {\n    discard;\n  }\n  col *= colorScale;\n  return col;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\n   uniform vec4 frameData;\n   uniform vec4 playData;\n   uniform vec4 animData;\nvec4 vert () {\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 position = vec4(0.0, 0.0, 0.0, 1.0);\n  vec4 wpos = matWorld * position;\n  float frame = playData.z;\n  if(frame == 0.0) {\n    float time = cc_time.x - playData.w + (wpos.x + wpos.y + wpos.z) * playData.y * 0.3;\n    frame = floor(time * frameData.z);\n    if (playData.x > 0.0) {\n      float count = frame / frameData.w;\n      if (count >= playData.x) {\n        v_uv = a_texCoord;\n        return position;\n      }\n    }\n    frame = mod(frame, frameData.w);\n  } else {\n    frame -= 1.0;\n  }\n  frame += animData.x;\n  float uvx = (mod(frame, frameData.x) + a_texCoord.x) / frameData.x;\n  float uvy = (floor(frame / frameData.x) + a_texCoord.y) / frameData.y;\n  v_uv = vec2(uvx, uvy);\n  position = cc_matView * wpos;\n  position.xyz += a_position * matWorld[0][0];\n  return cc_matProj * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\n   uniform vec4 mainColor;\n   uniform vec4 colorScale;\n#if USE_COLOR_SCALE\n#endif\nvec4 frag () {\n  vec4 col = mainColor * texture2D(mainTexture, v_uv);\n  #if USE_COLOR_SCALE\n    float a = col.x + col.y + col.z;\n    a *= 0.333;\n    col *= 1.2;\n    col.a = a;\n  #endif\n  if (col.a < 0.01) {\n    discard;\n  }\n  col *= colorScale;\n  return col;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":89,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_COLOR_SCALE","type":"boolean","defines":[]}],"blocks":[{"name":"frameAnimData","stageFlags":1,"binding":0,"members":[{"name":"frameData","type":16,"count":1},{"name":"playData","type":16,"count":1},{"name":"animData","type":16,"count":1}],"defines":[]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScale","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":0,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":1,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":2,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":3,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":4,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":5,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":6,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"frameAnim|vs:vert|fs:frag","properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":16,"value":[1,1,1,1]},"frameData":{"type":16,"value":[1,1,30,1],"editor":{"tooltip":"xy:贴图水平垂直方向包含的帧数；\nz:动画帧率；\nw:动画总帧数"}},"playData":{"type":16,"value":[0,1,0,0],"editor":{"tooltip":"x:动画播放次数，0表示无限循环；\ny:0-从第0帧开始播放，1-随机从某一帧开始播放，适用于循环动画；\nz:将动画暂停到指定的帧数，【帧数计数从1开始】，0表示不暂停;\nw:开始播放的时间戳(单位：秒)"}},"animData":{"type":16,"value":[0,0,0,0],"editor":{"tooltip":"x:起始帧索引，从0开始计数，\n结束帧的索引为 animData.x + frameData.w - 1"}}}}]},{"name":"transparent","passes":[{"program":"frameAnim|vs:vert|fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":16,"value":[1,1,1,1]},"frameData":{"type":16,"value":[1,1,30,1],"editor":{"tooltip":"xy:贴图水平垂直方向包含的帧数；\nz:动画帧率；\nw:动画总帧数"}},"playData":{"type":16,"value":[0,1,0,0],"editor":{"tooltip":"x:动画播放次数，0表示无限循环；\ny:0-从第0帧开始播放，1-随机从某一帧开始播放，适用于循环动画；\nz:将动画暂停到指定的帧数，【帧数计数从1开始】，0表示不暂停;\nw:开始播放的时间戳(单位：秒)"}},"animData":{"type":16,"value":[0,0,0,0],"editor":{"tooltip":"x:起始帧索引，从0开始计数，\n结束帧的索引为 animData.x + frameData.w - 1"}}}}]}]]],0,0,[],[],[]]]]
