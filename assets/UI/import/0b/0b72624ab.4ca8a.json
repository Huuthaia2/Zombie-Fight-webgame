[1,["dcm69trfBDoboWQXwZc5k2"],["_effectAsset"],[["cc.Material",["_states","_defines","_props"],1,12],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,3],[1,0,1,2,4]],[[[[0,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"maskColor",8,[4,3355443200]]],11]]],0,0,[0],[0],[0]],[[[1,"maskAnim",[{"hash":4154628668,"name":"maskAnim|vs:vert|fs:frag","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if SAMPLE_FROM_RT\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 0) out vec2 v_uv;\nvec4 vert () {\n  v_uv = a_texCoord;\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 0) uniform Constant {\n  vec4 maskColor;\n  vec4 maskShape;\n  vec4 animData;\n};\nfloat inRectMask() {\n  float x = 0.5 + (maskShape.x - 0.5) * animData.z;\n  float w = 0.5 + (maskShape.z - 0.5) * animData.z;\n  if (v_uv.x < x - w || v_uv.x > x + w) {\n    return 1.0;\n  }\n  float y = 0.5 + (maskShape.y - 0.5) * animData.z;\n  float h = 0.5 + (maskShape.w - 0.5) * animData.z;\n  if (v_uv.y < y - h || v_uv.y > y + h){\n    return 1.0;\n  }\n  return 0.0;\n}\nvec4 frag () {\n    float a = inRectMask();\n    if (a == 1.0) {\n      return maskColor;\n    } else {\n      discard;\n    }\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if SAMPLE_FROM_RT\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nvec4 vert () {\n  v_uv = a_texCoord;\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nin vec2 v_uv;\nlayout(std140) uniform Constant {\n  vec4 maskColor;\n  vec4 maskShape;\n  vec4 animData;\n};\nfloat inRectMask() {\n  float x = 0.5 + (maskShape.x - 0.5) * animData.z;\n  float w = 0.5 + (maskShape.z - 0.5) * animData.z;\n  if (v_uv.x < x - w || v_uv.x > x + w) {\n    return 1.0;\n  }\n  float y = 0.5 + (maskShape.y - 0.5) * animData.z;\n  float h = 0.5 + (maskShape.w - 0.5) * animData.z;\n  if (v_uv.y < y - h || v_uv.y > y + h){\n    return 1.0;\n  }\n  return 0.0;\n}\nvec4 frag () {\n    float a = inRectMask();\n    if (a == 1.0) {\n      return maskColor;\n    } else {\n      discard;\n    }\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvec4 vert () {\n  v_uv = a_texCoord;\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec2 v_uv;\n   uniform vec4 maskColor;\n   uniform vec4 maskShape;\n   uniform vec4 animData;\nfloat inRectMask() {\n  float x = 0.5 + (maskShape.x - 0.5) * animData.z;\n  float w = 0.5 + (maskShape.z - 0.5) * animData.z;\n  if (v_uv.x < x - w || v_uv.x > x + w) {\n    return 1.0;\n  }\n  float y = 0.5 + (maskShape.y - 0.5) * animData.z;\n  float h = 0.5 + (maskShape.w - 0.5) * animData.z;\n  if (v_uv.y < y - h || v_uv.y > y + h){\n    return 1.0;\n  }\n  return 0.0;\n}\nvec4 frag () {\n    float a = inRectMask();\n    if (a == 1.0) {\n      return maskColor;\n    } else {\n      discard;\n    }\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":46,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]}],"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"maskColor","type":16,"count":1},{"name":"maskShape","type":16,"count":1},{"name":"animData","type":16,"count":1}],"defines":[]}],"samplerTextures":[],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":1,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]}]}],[{"name":"transparent","passes":[{"program":"maskAnim|vs:vert|fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"maskColor":{"type":16,"value":[0,0,0,0.5],"editor":{"type":"color"}}}}]}]]],0,0,[],[],[]]]]
